{"version":3,"sources":["../node_modules/@vladmandic/face-api/dist sync","utilities.js","App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","labelMap","1","name","color","2","3","4","drawRect","boxes","classes","scores","threshold","imgWidth","imgHeight","ctx","i","length","y","x","height","width","text","strokeStyle","lineWidth","fillStyle","font","beginPath","fillText","Math","round","rect","stroke","App","dataURI","intervId","coord1","coord2","sdrogo","webcamRef","useRef","canvasRef","isDetected","runCoco","Image","getLabeledFaceDescriptions","faceRecognition","updateImageSource","a","c","document","createElement","ct","getContext","imm","src","onload","drawImage","toDataURL","getElementById","labaledFaceDescriptors","faceMatcher","faceapi","canvas","displaySize","withFaceLandmarks","withFaceDescriptors","detections","resizedDetections","clearRect","results","map","d","findBestMatch","descriptor","console","log","forEach","result","box","detection","drawBox","DrawBox","label","canvass","imma","draw","body","append","Promise","all","descriptions","process","image","withFaceDescriptor","push","tf","net","ssdMobilenetv1","loadFromUri","faceLandmark68Net","faceRecognitionNet","setInterval","detect","current","video","readyState","videoWidth","videoHeight","img","fromPixels","resized","resizeBilinear","casted","cast","expanded","expandDims","executeAsync","obj","array","getScreenshot","requestAnimationFrame","useEffect","className","ref","muted","style","position","marginLeft","marginRight","left","right","textAlign","zindex","alt","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.722314d1.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 228;","// Define our labelmap\r\nconst labelMap = {\r\n    1:{name:'person', color:'red'},\r\n    2:{name:'ThumbsDown', color:'yellow'},\r\n    3:{name:'ThankYou', color:'lime'},\r\n    4:{name:'LiveLong', color:'blue'},\r\n}\r\n\r\n// Define a drawing function\r\nexport const drawRect = (boxes, classes, scores, threshold, imgWidth, imgHeight, ctx)=>{\r\n    for(let i=0; i<=boxes.length; i++){\r\n        if(boxes[i] && classes[i] && scores[i]>threshold){\r\n            // Extract variables\r\n            const [y,x,height,width] = boxes[i]\r\n            const text = classes[i]\r\n            \r\n            // Set styling\r\n            ctx.strokeStyle = labelMap[text]['color']\r\n            ctx.lineWidth = 5\r\n            ctx.fillStyle = 'white'\r\n            ctx.font = '30px Arial'         \r\n            \r\n            // DRAW!!\r\n            ctx.beginPath()\r\n            ctx.fillText(labelMap[text]['name'] + ' - ' + Math.round(scores[i]*100)/100, x*imgWidth, y*imgHeight-10)\r\n            ctx.rect(x*imgWidth, y*imgHeight, width*imgWidth/2, height*imgHeight/2);\r\n            ctx.stroke()\r\n        }\r\n    }\r\n}","// Import dependencies\r\nimport * as faceapi from '@vladmandic/face-api';\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\nimport { nextFrame } from \"@tensorflow/tfjs\";\r\n// 2. TODO - Import drawing utility here\r\nimport {drawRect} from \"./utilities\"; \r\n\r\nfunction App() {\r\n  const webcamRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    var dataURI;\r\n    var intervId;\r\n    var coord1;\r\n    var coord2;\r\n    var width;\r\n    var height;\r\n    var isDetected = false;\r\n    var webcam = new Image();\r\n    var imgData;\r\n    var sdrogo;\r\n    var gg = \"gg\";\r\n    var videoW;\r\n    var videoH;\r\n    var i;\r\n    var imm;\r\n    \r\n  // Main function\r\n    const runCoco = async () => {\r\n        // 3. TODO - Load network \r\n        const net = await tf.loadGraphModel('https://testtfodausa.s3.eu-de.cloud-object-storage.appdomain.cloud/model.json');\r\n\r\n        /* Promise.all([\r\n            faceapi.nets.ssdMobilenetv1.loadFromUri(\"https://testtfodausa.s3.eu-de.cloud-object-storage.appdomain.cloud\"),\r\n            faceapi.nets.faceLandmark68Net.loadFromUri(\"https://testtfodausa.s3.eu-de.cloud-object-storage.appdomain.cloud\"),\r\n            faceapi.nets.faceRecognitionNet.loadFromUri(\"https://testtfodausa.s3.eu-de.cloud-object-storage.appdomain.cloud\"),\r\n        ]);\r\n        */\r\n        Promise.all([\r\n            faceapi.nets.ssdMobilenetv1.loadFromUri(process.env.PUBLIC_URL + \"/models\"),\r\n            faceapi.nets.faceLandmark68Net.loadFromUri(process.env.PUBLIC_URL + \"/models\"),\r\n            faceapi.nets.faceRecognitionNet.loadFromUri(process.env.PUBLIC_URL + \"/models\"),\r\n        ]);\r\n\r\n\r\n        function getLabeledFaceDescriptions() {\r\n            const labels = [\"Elon Musk\", \"Marco\", \"Obama\"];\r\n            return Promise.all(\r\n                labels.map(async (label) => {\r\n\r\n                    var descriptions = [];\r\n\r\n                    for (i = 1; i <= 8; i++) {\r\n                        const image = await faceapi.fetchImage(process.env.PUBLIC_URL + `/labels/${label}/${i}.jpeg`);\r\n                        //console.log(process.env.PUBLIC_URL + `/labels/${label}/${i}.jpeg`);\r\n                        const detections = await faceapi\r\n                            .detectSingleFace(image)\r\n                            .withFaceLandmarks()\r\n                            .withFaceDescriptor();\r\n\r\n                        descriptions.push(detections.descriptor);\r\n                    }\r\n                    return new faceapi.LabeledFaceDescriptors(label, descriptions)\r\n                })\r\n            );\r\n        }\r\n\r\n        async function faceRecognition(coord1, coord2, width, height) {\r\n            const labaledFaceDescriptors = await getLabeledFaceDescriptions();\r\n            const faceMatcher = new faceapi.FaceMatcher(labaledFaceDescriptors);\r\n\r\n            const canvas = faceapi.createCanvasFromMedia(document.getElementById(\"screenshot\"));\r\n            \r\n\r\n            const displaySize = { width: 640, height: 480 };\r\n            faceapi.matchDimensions(canvas, displaySize);\r\n\r\n            \r\n                const detections = await faceapi\r\n                    .detectAllFaces(document.getElementById(\"screenshot\"))\r\n                    .withFaceLandmarks()\r\n                    .withFaceDescriptors();\r\n\r\n                const resizedDetections = faceapi.resizeResults(detections, displaySize);\r\n                canvas.getContext(\"2d\").clearRect(0, 0, 640, 480);\r\n\r\n                const results = resizedDetections.map((d) => {\r\n                    return faceMatcher.findBestMatch(d.descriptor);\r\n                });\r\n                console.log(results);\r\n                //console.log(\"prima loop\");\r\n                results.forEach((result, i) => {\r\n                    //console.log(\"dentro loop\");\r\n                    const box = resizedDetections[i].detection.box;\r\n                    const drawBox = new faceapi.draw.DrawBox(box, {\r\n                        label: result,\r\n                    });\r\n                    const canvass = document.createElement(\"canvas\");\r\n                    canvass.width = 640;\r\n                    canvass.height = 480;\r\n                    const ctx = canvass.getContext(\"2d\")\r\n                    var imma = new Image(640, 480);\r\n                    imma.src = document.getElementById(\"screenshot\").src\r\n                    imma.onload = function () {\r\n                        ctx.drawImage(imma, coord1 * 640, coord2 * 480, width * 640, height * 480, 0, 0, width * 640, height * 480);\r\n                    }\r\n                    console.log(\"test\");\r\n                    drawBox.draw(canvass);\r\n                    document.body.append(canvass);\r\n                    canvass.getContext(\"2d\").clearRect(0, 0, 640, 480);\r\n                });\r\n\r\n            \r\n\r\n        }\r\n\r\n        // Loop and detect hands\r\n        setInterval(() => {\r\n            detect(net);\r\n        }, 16.7);\r\n\r\n\r\n        if (!intervId) {\r\n            console.log(intervId);\r\n            intervId = setInterval(() => {\r\n                updateImageSource();\r\n            }, 5000);\r\n        }\r\n\r\n\r\n        function updateImageSource() {\r\n            if (isDetected && sdrogo) {\r\n                var c = document.createElement('canvas');\r\n                c.width = 640;\r\n                c.height = 480;\r\n                var ct = c.getContext('2d');\r\n                var imm = new Image(640, 480);\r\n                imm.src = sdrogo;\r\n                imm.onload = function () {\r\n                    ct.drawImage(imm, coord1 * 640, coord2 * 480, width * 640, height * 480, 0, 0, width * 640, height * 480);\r\n                    dataURI = c.toDataURL('image/png');\r\n                    document.getElementById(\"screenshot\").src = dataURI;\r\n                    isDetected = false;\r\n                }\r\n                faceRecognition(coord1, coord2, width, height);\r\n            }\r\n        }\r\n    };\r\n\r\n  \r\n\r\n  \r\n\r\n  const detect = async (net) => {\r\n    // Check data is available\r\n     if (\r\n       typeof webcamRef.current !== \"undefined\" &&\r\n       webcamRef.current !== null &&\r\n       webcamRef.current.video.readyState === 4\r\n     ) {\r\n       // Get Video Properties\r\n       const video = webcamRef.current.video;\r\n       const videoWidth = webcamRef.current.video.videoWidth;\r\n       const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n       // Set video width\r\n       webcamRef.current.video.width = videoWidth;\r\n       webcamRef.current.video.height = videoHeight;\r\n\r\n       // Set canvas height and width\r\n       canvasRef.current.width = videoWidth;\r\n       canvasRef.current.height = videoHeight;\r\n\r\n       // 4. TODO - Make Detections\r\n       const img = tf.browser.fromPixels(video)\r\n       const resized = tf.image.resizeBilinear(img, [640, 480])\r\n       const casted = resized.cast('int32')\r\n       const expanded = casted.expandDims(0)\r\n       const obj = await net.executeAsync(expanded)\r\n\r\n       \r\n\r\n       const boxes = await obj[1].array()\r\n       const classes = await obj[0].array()\r\n       const scores = await obj[4].array()\r\n\r\n       // Draw mesh\r\n       const ctx = canvasRef.current.getContext(\"2d\");\r\n        \r\n\r\n       // 5. TODO - Update drawing utility\r\n       // drawSomething(obj, ctx) \r\n         if (scores[0][0] > 0.7) {\r\n             //var webcam = new Image();\r\n             sdrogo = await webcamRef.current.getScreenshot();\r\n             videoW = videoWidth;\r\n             isDetected = true;\r\n             coord1 = boxes[0][0][1];\r\n             coord2 = boxes[0][0][0];\r\n             width = boxes[0][0][3] - boxes[0][0][1];\r\n             height = boxes[0][0][2] - boxes[0][0][0];\r\n         }\r\n       requestAnimationFrame(()=>{drawRect(boxes[0], classes[0], scores[0], 0.70, videoWidth, videoHeight, ctx)}); \r\n         \r\n\r\n         \r\n\r\n         \r\n\r\n       tf.dispose(img)\r\n       tf.dispose(resized)\r\n       tf.dispose(casted)\r\n       tf.dispose(expanded)\r\n       tf.dispose(obj)\r\n\r\n      }\r\n      return sdrogo;\r\n  };\r\n\r\n  useEffect(() => {runCoco()},[]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Webcam\r\n          ref={webcamRef}\r\n          id=\"webcam\"\r\n          muted={true} \r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n              />\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 8,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n\r\n              \r\n                  <img\r\n                      \r\n                      id=\"screenshot\"\r\n                      alt=\"Screenshot\"\r\n                      style={{\r\n                          width: 640,\r\n                          height: 480,\r\n                      }}\r\n                      />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}