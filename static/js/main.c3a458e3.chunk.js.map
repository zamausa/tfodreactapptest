{"version":3,"sources":["utilities.js","App.js","index.js"],"names":["labelMap","1","name","color","2","3","4","drawRect","boxes","classes","scores","threshold","imgWidth","imgHeight","ctx","i","length","y","x","height","width","text","strokeStyle","lineWidth","fillStyle","font","beginPath","fillText","Math","round","rect","stroke","App","dataURI","intervId","webcamRef","useRef","canvasRef","isDetected","gg","Image","runCoco","a","tf","net","setInterval","detect","console","log","updateImageSource","c","document","createElement","sdrogo","getContext","toDataURL","getElementById","src","current","video","readyState","videoWidth","videoHeight","img","fromPixels","resized","resizeBilinear","casted","cast","expanded","expandDims","executeAsync","obj","array","getScreenshot","requestAnimationFrame","useEffect","className","ref","id","muted","style","position","marginLeft","marginRight","left","right","textAlign","zindex","alt","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c3a458e3.chunk.js","sourcesContent":["// Define our labelmap\r\nconst labelMap = {\r\n    1:{name:'person', color:'red'},\r\n    2:{name:'ThumbsDown', color:'yellow'},\r\n    3:{name:'ThankYou', color:'lime'},\r\n    4:{name:'LiveLong', color:'blue'},\r\n}\r\n\r\n// Define a drawing function\r\nexport const drawRect = (boxes, classes, scores, threshold, imgWidth, imgHeight, ctx)=>{\r\n    for(let i=0; i<=boxes.length; i++){\r\n        if(boxes[i] && classes[i] && scores[i]>threshold){\r\n            // Extract variables\r\n            const [y,x,height,width] = boxes[i]\r\n            const text = classes[i]\r\n            \r\n            // Set styling\r\n            ctx.strokeStyle = labelMap[text]['color']\r\n            ctx.lineWidth = 5\r\n            ctx.fillStyle = 'white'\r\n            ctx.font = '30px Arial'         \r\n            \r\n            // DRAW!!\r\n            ctx.beginPath()\r\n            ctx.fillText(labelMap[text]['name'] + ' - ' + Math.round(scores[i]*100)/100, x*imgWidth, y*imgHeight-10)\r\n            ctx.rect(x*imgWidth, y*imgHeight, width*imgWidth/2, height*imgHeight/2);\r\n            ctx.stroke()\r\n        }\r\n    }\r\n}","// Import dependencies\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\nimport { nextFrame } from \"@tensorflow/tfjs\";\r\n// 2. TODO - Import drawing utility here\r\nimport {drawRect} from \"./utilities\"; \r\n\r\nfunction App() {\r\n  const webcamRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    var dataURI;\r\n    var intervId;\r\n    var coord1;\r\n    var coord2;\r\n    var width;\r\n    var height;\r\n    var isDetected = false;\r\n    var webcam = new Image();\r\n    var imgData;\r\n    var sdrogo;\r\n    var gg = \"gg\";\r\n\r\n  // Main function\r\n  const runCoco = async () => {\r\n    // 3. TODO - Load network \r\n      const net = await tf.loadGraphModel('https://testtfodausa.s3.eu-de.cloud-object-storage.appdomain.cloud/model.json')\r\n    \r\n    // Loop and detect hands\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 16.7);\r\n\r\n    \r\n      if (!intervId) {\r\n          console.log(intervId);\r\n          intervId = setInterval(() => {\r\n              updateImageSource();\r\n          }, 5000);\r\n          console.log(intervId);\r\n      }\r\n\r\n    };\r\n\r\n    function updateImageSource() {\r\n        if (isDetected) {\r\n            const c = document.createElement('canvas');\r\n            gg = sdrogo;\r\n            console.log(typeof(gg));\r\n            var sdr = c.getContext('2d');\r\n            if (sdrogo && coord1 && coord2 && width && height) {\r\n                sdr.drawImage(sdrogo, 0, 0, 640, 480, 0, 0, 640, 480);\r\n                console.log(\"funzione\", sdrogo, coord1, coord2, width, height);\r\n            }\r\n            console.log(\"funzione\", typeof (sdrogo));\r\n            dataURI = c.toDataURL('image/jpeg');\r\n            console.log(\"funzione\", dataURI);\r\n            document.getElementById('screenshot').src = sdrogo;\r\n            isDetected = false;\r\n        }\r\n    }\r\n\r\n  const detect = async (net) => {\r\n    // Check data is available\r\n     if (\r\n       typeof webcamRef.current !== \"undefined\" &&\r\n       webcamRef.current !== null &&\r\n       webcamRef.current.video.readyState === 4\r\n     ) {\r\n       // Get Video Properties\r\n       const video = webcamRef.current.video;\r\n       const videoWidth = webcamRef.current.video.videoWidth;\r\n       const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n       // Set video width\r\n       webcamRef.current.video.width = videoWidth;\r\n       webcamRef.current.video.height = videoHeight;\r\n\r\n       // Set canvas height and width\r\n       canvasRef.current.width = videoWidth;\r\n       canvasRef.current.height = videoHeight;\r\n\r\n       // 4. TODO - Make Detections\r\n       const img = tf.browser.fromPixels(video)\r\n       const resized = tf.image.resizeBilinear(img, [640, 480])\r\n       const casted = resized.cast('int32')\r\n       const expanded = casted.expandDims(0)\r\n       const obj = await net.executeAsync(expanded)\r\n\r\n      \r\n\r\n       const boxes = await obj[1].array()\r\n       const classes = await obj[0].array()\r\n       const scores = await obj[4].array()\r\n\r\n       // Draw mesh\r\n       const ctx = canvasRef.current.getContext(\"2d\");\r\n        \r\n\r\n       // 5. TODO - Update drawing utility\r\n       // drawSomething(obj, ctx) \r\n         const sdrogo = webcamRef.current.getScreenshot();\r\n         if (scores[0][0] > 0.7) {\r\n             //var webcam = new Image();\r\n             isDetected = true;\r\n             console.log(typeof(sdrogo));\r\n             coord1 = boxes[0][0][0];\r\n             coord2 = boxes[0][0][1];\r\n             width = boxes[0][0][2] - boxes[0][0][0];\r\n             height = boxes[0][0][3] - boxes[0][0][1];\r\n             //console.log(\"sdrogo\", coord1, coord2, width, height);\r\n             //console.log(sdrogo);\r\n             //console.log(\"test\");\r\n             /* var pazzo = document.createElement('canvas');\r\n             pazzo.width = 640;\r\n             pazzo.height = 480;\r\n             webcam = pazzo.getContext('2d');\r\n             webcam = webcam.drawImage(video, 640, 480);\r\n             */\r\n             console.log(\"webcam aggiornata\");\r\n         }\r\n       requestAnimationFrame(()=>{drawRect(boxes[0], classes[0], scores[0], 0.70, videoWidth, videoHeight, ctx)}); \r\n         \r\n\r\n         \r\n\r\n         \r\n\r\n       tf.dispose(img)\r\n       tf.dispose(resized)\r\n       tf.dispose(casted)\r\n       tf.dispose(expanded)\r\n       tf.dispose(obj)\r\n\r\n    }\r\n  };\r\n\r\n  useEffect(() => {runCoco()},[]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Webcam\r\n          ref={webcamRef}\r\n          id=\"webcam\"\r\n          muted={true} \r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 8,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n\r\n              \r\n                  <img\r\n                      \r\n                      id=\"screenshot\"\r\n                      alt=\"Screenshot\"\r\n                      style={{\r\n                          width: 680,\r\n                          height: 480,\r\n                      }}\r\n                      />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}